#!/usr/bin/env python
#
# A tool to manipulate clouds
#
# Author: Peter Pakos <peter.pakos@wandisco.com>

from __future__ import print_function
import argparse
import os
import sys
from WDCloud import WDCloud


class Main(object):
    _version = '17.5.19'
    _name = os.path.basename(sys.argv[0])

    def __init__(self):
        self._args = self._parse_args()
        self._cloud = WDCloud.loader(self._args.cloud_provider, self._args.profile_name, self._args.region)

    def run(self):
        if self._args.command == 'list':
            self._cloud.list(disable_border=self._args.disable_border,
                             disable_header=self._args.disable_header,
                             state=self._args.state,
                             notify=self._args.notify,
                             stop=self._args.stop,
                             warning_threshold=self._args.warning_threshold * 3600,
                             critical_threshold=self._args.critical_threshold * 3600)
        elif self._args.command == 'list-regions':
            self._cloud.list_regions(disable_border=self._args.disable_border,
                                     disable_header=self._args.disable_header)
        elif self._args.command == 'exclude':
            self._cloud.tag(instance_id=self._args.id,
                            key='EXCLUDE',
                            value='True')
        elif self._args.command == 'include':
            self._cloud.tag(instance_id=self._args.id,
                            key='EXCLUDE',
                            delete=True)
        elif self._args.command == 'tag':
            self._cloud.tag(instance_id=self._args.id,
                            key=self._args.key,
                            value=self._args.value,
                            delete=self._args.delete)
        elif self._args.command == 'sg':
            self._cloud.sg(cidr=self._args.cidr, delete=self._args.sg_delete)
        else:
            self.die('Command %s not implemented yet' % self._args.command)

    def _display_version(self):
        print('%s version %s' % (self._name, self._version))

    @staticmethod
    def die(message=None, code=1):
        if message is not None:
            print(message, file=sys.stderr)
        exit(code)

    def _parse_args(self):
        parser = argparse.ArgumentParser(description='A tool to manipulate clouds')

        parser.add_argument('--version', action='version', version='%s %s' % (self._name, self._version))
        parser.add_argument('-c', '--cloud-provider', help='cloud provider (default: %(default)s)',
                            dest='cloud_provider', choices=['aws', 'gcp', 'azure'], default='aws')
        parser.add_argument('-p', '--profile-name', help='cloud profile name (default: %(default)s)',
                            dest='profile_name', default='infra')
        parser.add_argument('-r', '--region', help='choose single region (default: all)', dest='region')

        subparsers = parser.add_subparsers(title='commands', dest='command')
        parser_describe_instances = subparsers.add_parser('list', help='display list of instances')
        parser_describe_instances.add_argument('-b', '--disable-border', help='disable table border',
                                               action='store_true', dest='disable_border')
        parser_describe_instances.add_argument('-H', '--disable-header', help='disable table header',
                                               action='store_true', dest='disable_header')
        parser_describe_instances.add_argument('-s', '--state', help='display instances only in certain states',
                                               action='append', dest='state',
                                               choices=['running', 'pending', 'shutting-down', 'stopped', 'stopping',
                                                        'terminated'])
        parser_describe_instances.add_argument('-n', '--notify', help='send notification and warning emails',
                                               action='store_true', dest='notify')
        parser_describe_instances.add_argument('-t', '--warning-threshold',
                                               help='warning emails threshold (hours, default: %(default)s)',
                                               dest='warning_threshold', default=12, type=int)
        parser_describe_instances.add_argument('-S', '--stop', help='stop instances running longer than set threshold',
                                               action='store_true', dest='stop')
        parser_describe_instances.add_argument('-T', '--critical-threshold',
                                               dest='critical_threshold', default=24, type=int,
                                               help='instance auto stop & alert threshold (hours, default: %(default)s)'
                                               )

        parser_describe_regions = subparsers.add_parser('list-regions', help='display list of available regions')
        parser_describe_regions.add_argument('-b', '--disable-border', help='disable table border',
                                             action='store_true', dest='disable_border')
        parser_describe_regions.add_argument('-H', '--disable-header', help='disable table header',
                                             action='store_true', dest='disable_header')

        parser_exclude = subparsers.add_parser('exclude', help='exclude instances from alerting (create EXCLUDE tag)')
        parser_exclude.add_argument('-i', '--id', help='instance id', action='append', dest='id', required=True)

        parser_include = subparsers.add_parser('include', help='include instances in alerting (delete EXCLUDE tag)')
        parser_include.add_argument('-i', '--id', help='instance id', action='append', dest='id', required=True)

        parser_tag = subparsers.add_parser('tag', help='tag instances')
        parser_tag.add_argument('-i', '--id', help='instance id', action='append', dest='id', required=True)
        parser_tag.add_argument('-k', '--key', help='key', dest='key', required=True)
        parser_tag.add_argument('-v', '--value', help='value', dest='value', default='')
        parser_tag.add_argument('-d', '--delete', help='delete tag', dest='delete', action='store_true', default=False)

        parser_sg = subparsers.add_parser('sg', help='batch edit Security Groups rules')
        parser_sg.add_argument('-c', '--cidr', help='IP address in CIDR notation', dest='cidr',
                               required=True)
        parser_sg.add_argument('-d', '--delete', help='delete rule', dest='sg_delete', action='store_true',
                               default=False)

        return parser.parse_args()


if __name__ == '__main__':
    try:
        main = Main()
        main.run()
    except KeyboardInterrupt:
        print('\nCancelling...')
